-- note: requires Raylib, see: https://github.com/Andre-LA/raylib-nelua
require 'raylib'
require 'rotor'
require 'math'

local e_count = 0_u
local E_MAX <comptime>= #[ E_COUNT or 5000 ]#

local function log(msg: stringview)
  ## if not NOLOG then
    print(msg)
  ## end
end

local function log_id(msg: stringview, id: GenerationalIndex)
  ## if not NOLOG then
    print(msg, id.index, id.generation)
  ## end
end

local Position = @record{
  x: number,
  y: number,
}

local Velocity = @record{
  x: number,
  y: number,
}

local Circle = @record{
  color: Color
}

local EntityInfo = @record{
  dead: boolean,
  entity_id: GenerationalIndex,
  position_id: GenerationalIndex,
  velocity_id: GenerationalIndex,
  circle_id: GenerationalIndex,
  entity_info_id: GenerationalIndex,
}

local Storages = @record{
  entity: Storage(Entity),
  position: Storage(Position),
  velocity: Storage(Velocity),
  circle: Storage(Circle),
  entity_info: Storage(EntityInfo),
}

function Storages:destroy()
  self.position:destroy()
  self.velocity:destroy()
  self.circle:destroy()
  self.entity_info:destroy()

  self.entity:destroy(function (entity: *Entity)
    entity:destroy()
  end)
end

local storages: Storages = {
  entity = (@Storage(Entity)).new(E_MAX),
  position = (@Storage(Position)).new(E_MAX),
  velocity = (@Storage(Velocity)).new(E_MAX),
  circle = (@Storage(Circle)).new(E_MAX),
  entity_info = (@Storage(EntityInfo)).new(E_MAX),
}

defer
  storages:destroy()
end

local masks: record{
  position: BitsetArray,
  velocity: BitsetArray,
  circle: BitsetArray,
  entity_info: BitsetArray,
} = {
  position    = BitsetArray.one(),
  velocity    = BitsetArray.lshifted_one(1),
  circle      = BitsetArray.lshifted_one(2),
  entity_info = BitsetArray.lshifted_one(3),
}

local Systems = @record{
  velocity: SystemData,
  circle_painter: SystemData,
  entity_destroyer_system: SystemData,
}

function Systems:destroy()
  self.velocity:destroy()
  self.circle_painter:destroy()
  self.entity_destroyer_system:destroy()
end

local systems: Systems = {
  velocity = SystemData.new{
    masks.velocity,
    masks.entity_info,
    masks.position
  },
  circle_painter = SystemData.new{
    masks.position,
    masks.circle,
    masks.entity_info
  },
  entity_destroyer_system = SystemData.new{
    masks.entity_info
  },
}

defer
  systems:destroy()
end

local CircleEntity = @record{}

function CircleEntity.new(entity_i: uinteger)
  local entity_id, entity = storages.entity:new_entry(Entity.new())
  log_id('new entity: ', entity_id)

  local position_id, position = storages.position:new_entry({ 0,0 })
  entity:associate(position_id, masks.position)

  local velocity_id, velocity = storages.velocity:new_entry({ math.random(25, 50), math.random(25, 50) })
  entity:associate(velocity_id, masks.velocity)

  local circle_id, circle = storages.circle:new_entry({ color = GREEN })
  entity:associate(circle_id, masks.circle)

  local entity_info_id, entity_info = storages.entity_info:new_entry({
    entity_id = entity_id,
    position_id = position_id,
    velocity_id = velocity_id,
    circle_id = circle_id
  })
  entity_info.entity_info_id = entity_info_id
  entity:associate(entity_info_id, masks.entity_info)

  systems.velocity:update(entity)
  systems.circle_painter:update(entity)
  systems.entity_destroyer_system:update(entity)
end

function CircleEntity.remove(e_info: EntityInfo)
  local opt_entity = storages.entity:get_entry(e_info.entity_id)
  check(opt_entity.filled, 'entity to remove not found')
  local entity: *Entity = opt_entity:get()
  entity:clear()

  storages.entity:remove_entry(e_info.entity_id)

  storages.position:remove_entry(e_info.position_id)
  storages.velocity:remove_entry(e_info.velocity_id)
  storages.circle:remove_entry(e_info.circle_id)
  storages.entity_info:remove_entry(e_info.entity_info_id)
end

local function velocity_system(sysdata: *SystemData)
  for i, ids in sysdata:iterate_ids() do
    local opt_velocity = storages.velocity:get_entry(ids[0])
    local opt_position = storages.position:get_entry(ids[1])
    local opt_entity_info = storages.entity_info:get_entry(ids[2])

    if opt_velocity.filled and opt_position.filled and opt_entity_info.filled then
      local velocity = opt_velocity:get()
      local position = opt_position:get()
      local entity_info = opt_entity_info:get()

      if entity_info.dead then
        continue
      end

      local dt = Raylib.GetFrameTime()

      position.x = position.x + velocity.x * dt
      position.y = position.y + velocity.y * dt

      if position.x > 800 or position.y > 600 then
        if true or math.random(0.0, 1.0) < 0.4 then
          entity_info.dead = true
          log_id('DEAD TRUE: ', entity_info.entity_id)
        else
          position.x, position.y = 0, 0
        end
      end
    else
      sysdata:mark_available(i)
    end
  end
end

local function circle_painter_system(sysdata: *SystemData)
  for i, ids in sysdata:iterate_ids() do
    local opt_position = storages.position:get_entry(ids[0])
    local opt_circle = storages.circle:get_entry(ids[1])
    local opt_entity_info = storages.entity_info:get_entry(ids[2])

    if opt_position.filled and opt_circle.filled and opt_entity_info.filled then
      local position = opt_position:get()
      local circle = opt_circle:get()
      local entity_info = opt_entity_info:get()

      if entity_info.dead then
        continue
      end

      local x: cint = position.x // 1
      local y: cint = position.y // 1

      ## if not NODRAW then
        Raylib.DrawPixel(x, y, circle.color)
      ## end
    else
      sysdata:mark_available(i)
    end
  end
end

local function entity_destroyer_system(sysdata: *SystemData)
  for i, ids in sysdata:iterate_ids() do
    local opt_entity_info = storages.entity_info:get_entry(ids[0])

    if opt_entity_info.filled then
      local entity_info = opt_entity_info:get()

      if entity_info.dead then
        log'entity removed!'
        CircleEntity.remove(entity_info)
        e_count = e_count - 1
      end
    else
      sysdata:mark_available(i)
    end
  end
end

Raylib.SetConfigFlags(ConfigFlag.FLAG_WINDOW_RESIZABLE)
local SCREEN_WIDTH <comptime> = 800
Raylib.InitWindow(SCREEN_WIDTH, 600, "Rotor-nelua ECS test")

Raylib.SetTargetFPS(60)

local function frame()
  local fps = Raylib.GetFPS()

  entity_destroyer_system(systems.entity_destroyer_system)

  for i = 1, 100 do
    if e_count < E_MAX then
      CircleEntity.new(e_count)
      e_count = e_count + 1
    end
  end

  velocity_system(systems.velocity)

  Raylib.BeginDrawing()
    Raylib.ClearBackground(BLACK)

    ## if not NODRAW then
      circle_painter_system(systems.circle_painter)
    ## end

    ## if not NOFPS then
      Raylib.DrawFPS((SCREEN_WIDTH - 100) // 1, 10)
    ## end

    ## if not NODRAWCOUNT then
      local count = tostring(e_count)
      defer count:destroy() end
      Raylib.DrawText(count, (SCREEN_WIDTH - 200), 40, 20, WHITE)
    ## end

  Raylib.EndDrawing()
end

while not Raylib.WindowShouldClose() do
  frame()
end

Raylib.CloseWindow()

