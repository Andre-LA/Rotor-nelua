## local make_optional = generalize(function(T)
   local T = @#[T]#

   local OptionalT <codename #['Optional_'..T.codename]#> = @record{
      value: T,
      filled: boolean
   }

   ## OptionalT.value.is_optional = true
   ## OptionalT.value.subtype = T

   function OptionalT:get(): T
      assert(self.filled, "optional value has no value")
      return self.value
   end

   function OptionalT:set(v: T)
      self.value = v
      self.filled = true
   end

   function OptionalT:clear()
      self.value = (@T)()
      self.filled = false
   end

   ## return OptionalT
## end)

global optional: type = #[make_optional]#

## if true then
   local R = @record{f: integer}
   local optR: optional(R);

   local r = (@R){f = 123}
   optR:set(r)

   local x: optional(uinteger)

   assert(x.value == 0 and not x.filled, 'test #1 error: x should be {value = 0, filled = true}')

   x:set(10)

   assert(x.value == 10 and x.filled, 'test #3 error: x should be {value = 10, filled = true}')
   assert(x.value == x:get(), 'test #4 error: x:get() should returns the x\'s value')
## end
