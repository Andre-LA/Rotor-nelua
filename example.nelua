-- ## cflags '-fsanitize=address'

local ENTITY_COUNT: uinteger <comptime> = 15_u

require 'math'
require 'os'

require ("rotor.bitset_array")
require ("rotor.bitset_array")
require ("rotor.entity")
require ("rotor.storage")
require ("rotor.system_data")

local Vec2 = @record {
   x: integer,
   y: integer
}

local Position: type = @Vec2
local Velocity: type = @Vec2
local Name: type = @string

local Rightmost = @record {
   pos_component: Position,
   name_component: Name
}

local PositionStorage: type = @Storage(Position);
local VelocityStorage: type = @Storage(Velocity);
local EntityStorage: type = @Storage(Entity);
local NameStorage: type = @Storage(Name);

local Storages = @record {
   position: PositionStorage,
   velocity: VelocityStorage,
   entity: EntityStorage,
   name: NameStorage
}

-- storages, its where components and entities will live
local storages = (@Storages) {
   position = PositionStorage.new(),
   velocity = VelocityStorage.new(),
   entity = EntityStorage.new(),
   name = NameStorage.new()
}

local Masks = @record{
   position: BitsetArray,
   velocity: BitsetArray,
   name: BitsetArray
}


-- masks
local masks: Masks = (@Masks){
   position = bitset_array.new(1, BITSETARRAY_OF_ONE),                         -- 1
   velocity = bitset_array.lshift(bitset_array.new(1, BITSETARRAY_OF_ONE), 1), -- 2
   name     = bitset_array.lshift(bitset_array.new(1, BITSETARRAY_OF_ONE), 2)  -- 4
}

local movement_read: vector(BitsetArray);
local movement_write: vector(BitsetArray);

movement_read:push(bitset_array.copy(masks.velocity))
movement_write:push(bitset_array.copy(masks.position))

local rightmost_read: vector(BitsetArray)
rightmost_read:push(bitset_array.copy(masks.name))
rightmost_read:push(bitset_array.copy(masks.position))

local rightmost_write: vector(BitsetArray)

-- systems data
local SystemsData = @record{
   movement: SystemData,
   rightmost: SystemData
}

local systems_data = (@SystemsData){
   movement  = SystemData.new(movement_read, movement_write),
   rightmost = SystemData.new(rightmost_read, rightmost_write)
}

-- systems are just functions, here we have 2 examples
-- movement_system is more "functional", using arguments instead of locals declared above.
-- rightmost_system will use the locals
-- anyway, do what you think is better, is just a function ;)

local function movement_system(mov_system_data: SystemData*, velocity_storage: VelocityStorage*, position_storage: PositionStorage*)
   for i = 0, < #mov_system_data.components_indexes do
      local ids = mov_system_data.components_indexes[i]

      if #ids > 0 then
         local vel_id: GenerationalIndex = ids[0]
         local pos_id: GenerationalIndex = ids[1]

         local possible_vel = velocity_storage:get_entry(vel_id)
         local possible_pos = position_storage:get_entry(pos_id)

         if possible_pos.filled and possible_vel.filled then
            local pos = possible_pos:get()
            local vel = possible_vel:get()

            pos.x = pos.x + vel.x
            pos.y = pos.y + vel.y
         else
            mov_system_data:mark_available(i)
         end
      end
   end
end

local function rightmost_system(rightmost: Rightmost*)
   local rightmost_position = math.mininteger

   for i = 0, < #systems_data.rightmost.components_indexes do
      local ids = systems_data.rightmost.components_indexes[i]

      if #ids > 0 then
         local name_id = ids[0]
         local possible_name = storages.name:get_entry(name_id)

         local pos_id = ids[1]
         local possible_pos  = storages.position:get_entry(pos_id)

         if possible_name.filled and possible_pos.filled then
            local name = possible_name:get()
            local pos = possible_pos:get()

            if pos.x > rightmost_position then
               rightmost_position  = pos.x
               rightmost.pos_component = $pos
               rightmost.name_component = $name
            end
         else
            systems_data.rightmost:mark_available(i)
         end
      end
   end
end

-- here, we will store the ids
local e_ids: vector(GenerationalIndex);
local names_ids: vector(GenerationalIndex);

-- also, we need to store the ids of created and removed entities ids
local untracked_entities_ids: vector(GenerationalIndex);


-- let's create 1 entity!
print 'creating!'
for i = 0, < ENTITY_COUNT do
   -- create an entity in the entities storage and get this new entity
   local new_entity_id, new_entity = storages.entity:new_entry(Entity.new())
   e_ids:push(new_entity_id)

   -- create the components in their respective storages.
   -- storage.new_entry(value) returns a generational_index, it's used as an ID
   -- create_position(x, y) returns just a new very simple table, remember?
   math.randomseed(os.time_default())
   local new_position_id, new_position = storages.position:new_entry((@Position){
      x = (@integer)(math.random() * 200 - 100.0), y = (@integer)(i)
   })

   math.randomseed(os.time_default())
   local new_velocity_id, new_velocity = storages.velocity:new_entry((@Velocity){
      x = (@integer)(math.random() * 400 - 200.0), y = 0
   })

   -- storages accepts any value
   local new_name_id, new_name = storages.name:new_entry("some entity")
   names_ids:push(new_name_id)

   -- this is how we associate an entity with a component (storage entry);
   -- making a unique bitmask per storage is necessary
   new_entity:associate(new_position_id, masks.position)
   new_entity:associate(new_velocity_id, masks.velocity)
   new_entity:associate(new_name_id, masks.name)

   -- storing the new entity ids
   untracked_entities_ids:push(new_entity_id)
end

-- now, we update the systems datas, so they will know what entities
-- should be processed
print 'update systems!'
systems_data.movement:update(&storages.entity, untracked_entities_ids)
systems_data.rightmost:update(&storages.entity, untracked_entities_ids)

 --let's execute movement system 10x
for _ = 1, 10 do
   print ('executing movement system')
   movement_system(systems_data.movement, storages.velocity, storages.position)
end

local rightmost: Rightmost

-- let's execute rightmost_system, note that 'rigtmost' variable
-- is not an storage, component, or something specific;
-- since systems are just functions that you can declare and use
-- in whathever way you want, there is absolutely no special thing
-- in executing systems, they are just functions.
print ('executing rightmost system')
rightmost_system(&rightmost)

for i = 0, < #storages.entity.entries do
   local e_id = e_ids[i]
   local name_id = names_ids[i]

   local possible_e = storages.entity:get_entry(e_id)

   if possible_e.filled then
      local e = possible_e:get()
      e:disassociate_by_storage(masks.position)
      e:disassociate_by_storage(masks.velocity)
      e:disassociate_by_component(name_id)
   end
end

local name, pos_x = rightmost.name_component, rightmost.pos_component.x
print ("entity '", name, "' is in the rightmost position x: ", pos_x)
